// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module sobel_resize_accel_MatStream2AxiStream_2_Pipeline_MMIterOutRow_MMIterOutCol (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_dstgx_data_dout,
        p_dstgx_data_num_data_valid,
        p_dstgx_data_fifo_cap,
        p_dstgx_data_empty_n,
        p_dstgx_data_read,
        ldata_din,
        ldata_num_data_valid,
        ldata_fifo_cap,
        ldata_full_n,
        ldata_write,
        bound,
        empty,
        sub,
        last_blk_width_load,
        cols_bound_per_npc_load,
        localbuffer_out,
        localbuffer_out_ap_vld,
        filled_out,
        filled_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] p_dstgx_data_dout;
input  [2:0] p_dstgx_data_num_data_valid;
input  [2:0] p_dstgx_data_fifo_cap;
input   p_dstgx_data_empty_n;
output   p_dstgx_data_read;
output  [7:0] ldata_din;
input  [2:0] ldata_num_data_valid;
input  [2:0] ldata_fifo_cap;
input   ldata_full_n;
output   ldata_write;
input  [31:0] bound;
input  [15:0] empty;
input  [31:0] sub;
input  [3:0] last_blk_width_load;
input  [31:0] cols_bound_per_npc_load;
output  [7:0] localbuffer_out;
output   localbuffer_out_ap_vld;
output  [3:0] filled_out;
output   filled_out_ap_vld;

reg ap_idle;
reg p_dstgx_data_read;
reg ldata_write;
reg localbuffer_out_ap_vld;
reg filled_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
reg   [0:0] icmp_ln1301_reg_437;
reg   [0:0] icmp_ln1315_reg_446;
reg    ap_predicate_op43_read_state3;
reg    ap_block_state3_pp0_stage0_iter2;
reg   [0:0] icmp_ln1301_reg_437_pp0_iter3_reg;
reg   [0:0] icmp_ln1324_reg_466;
reg   [0:0] icmp_ln1324_reg_466_pp0_iter3_reg;
reg    ap_predicate_op65_write_state5;
reg    ap_block_state5_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln1301_fu_193_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    p_dstgx_data_blk_n;
wire    ap_block_pp0_stage0;
reg    ldata_blk_n;
reg   [7:0] val_1_reg_158;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln1301_reg_437_pp0_iter2_reg;
wire   [0:0] bLast_fu_224_p2;
reg   [0:0] bLast_reg_441;
wire   [0:0] icmp_ln1315_fu_229_p2;
reg   [3:0] filled_1_reg_450;
wire   [4:0] zext_ln1320_2_fu_264_p1;
reg   [4:0] zext_ln1320_2_reg_461;
wire   [0:0] icmp_ln1324_fu_274_p2;
wire   [7:0] shl_ln1320_fu_301_p2;
reg   [7:0] shl_ln1320_reg_470;
wire  signed [4:0] sub_ln1332_fu_307_p2;
reg  signed [4:0] sub_ln1332_reg_475;
reg   [0:0] tmp_13_reg_480;
wire   [2:0] sub_ln1332_1_fu_324_p2;
reg   [2:0] sub_ln1332_1_reg_485;
reg    ap_condition_exit_pp0_iter2_stage0;
reg   [3:0] ap_phi_mux_conv3_i12_i_i933_pn_phi_fu_152_p4;
wire   [3:0] xor_ln1333_fu_280_p2;
wire   [3:0] ap_phi_reg_pp0_iter2_conv3_i12_i_i933_pn_reg_149;
wire   [3:0] xf_bits_per_clock_fu_253_p3;
wire   [7:0] ap_phi_reg_pp0_iter0_val_1_reg_158;
reg   [7:0] ap_phi_reg_pp0_iter1_val_1_reg_158;
reg   [7:0] ap_phi_reg_pp0_iter2_val_1_reg_158;
reg   [7:0] ap_phi_reg_pp0_iter3_val_1_reg_158;
reg   [3:0] filled_fu_76;
wire   [3:0] filled_next_fu_287_p2;
wire    ap_loop_init;
reg   [7:0] localbuffer_fu_80;
wire   [7:0] localbuffer_2_fu_361_p3;
wire   [7:0] localbuffer_1_fu_333_p2;
reg   [15:0] j_fu_84;
wire   [15:0] add_ln1306_fu_234_p2;
reg   [31:0] indvar_flatten_fu_88;
wire   [31:0] add_ln1301_fu_198_p2;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln1306_fu_207_p2;
wire   [15:0] select_ln1294_fu_212_p3;
wire   [31:0] zext_ln1306_fu_220_p1;
wire   [4:0] zext_ln1313_fu_260_p1;
wire   [4:0] sub_ln1324_fu_268_p2;
wire   [7:0] filled_1cast_fu_298_p1;
wire   [2:0] trunc_ln1332_fu_312_p1;
wire   [7:0] zext_ln1332_fu_342_p1;
wire  signed [31:0] sext_ln1332_fu_339_p1;
wire   [7:0] sext_ln1332cast_fu_351_p1;
wire   [7:0] shl_ln1332_fu_345_p2;
wire   [7:0] lshr_ln1332_fu_355_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_195;
reg    ap_condition_393;
reg    ap_condition_396;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 filled_fu_76 = 4'd0;
#0 localbuffer_fu_80 = 8'd0;
#0 j_fu_84 = 16'd0;
#0 indvar_flatten_fu_88 = 32'd0;
#0 ap_done_reg = 1'b0;
end

sobel_resize_accel_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter2_stage0)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_195)) begin
        if (((icmp_ln1301_fu_193_p2 == 1'd0) & (icmp_ln1315_fu_229_p2 == 1'd0))) begin
            ap_phi_reg_pp0_iter2_val_1_reg_158 <= 8'd0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter2_val_1_reg_158 <= ap_phi_reg_pp0_iter1_val_1_reg_158;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln1315_reg_446 == 1'd1) & (icmp_ln1301_reg_437 == 1'd0))) begin
            ap_phi_reg_pp0_iter3_val_1_reg_158 <= p_dstgx_data_dout;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_val_1_reg_158 <= ap_phi_reg_pp0_iter2_val_1_reg_158;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            filled_fu_76 <= 4'd0;
        end else if (((icmp_ln1301_reg_437 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            filled_fu_76 <= filled_next_fu_287_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_88 <= 32'd0;
        end else if (((icmp_ln1301_fu_193_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten_fu_88 <= add_ln1301_fu_198_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            j_fu_84 <= 16'd0;
        end else if (((icmp_ln1301_fu_193_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            j_fu_84 <= add_ln1306_fu_234_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            localbuffer_fu_80 <= 8'd0;
        end else if ((1'b1 == ap_condition_396)) begin
            localbuffer_fu_80 <= localbuffer_1_fu_333_p2;
        end else if ((1'b1 == ap_condition_393)) begin
            localbuffer_fu_80 <= localbuffer_2_fu_361_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        bLast_reg_441 <= bLast_fu_224_p2;
        icmp_ln1301_reg_437 <= icmp_ln1301_fu_193_p2;
        icmp_ln1315_reg_446 <= icmp_ln1315_fu_229_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        icmp_ln1301_reg_437_pp0_iter2_reg <= icmp_ln1301_reg_437;
        icmp_ln1301_reg_437_pp0_iter3_reg <= icmp_ln1301_reg_437_pp0_iter2_reg;
        icmp_ln1324_reg_466 <= icmp_ln1324_fu_274_p2;
        icmp_ln1324_reg_466_pp0_iter3_reg <= icmp_ln1324_reg_466;
        shl_ln1320_reg_470 <= shl_ln1320_fu_301_p2;
        sub_ln1332_1_reg_485 <= sub_ln1332_1_fu_324_p2;
        sub_ln1332_reg_475 <= sub_ln1332_fu_307_p2;
        tmp_13_reg_480 <= sub_ln1332_fu_307_p2[32'd4];
        zext_ln1320_2_reg_461[3 : 0] <= zext_ln1320_2_fu_264_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_val_1_reg_158 <= ap_phi_reg_pp0_iter0_val_1_reg_158;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        filled_1_reg_450 <= filled_fu_76;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        val_1_reg_158 <= ap_phi_reg_pp0_iter3_val_1_reg_158;
    end
end

always @ (*) begin
    if (((icmp_ln1301_fu_193_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln1301_reg_437 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln1301_reg_437 == 1'd0)) begin
        if ((icmp_ln1324_fu_274_p2 == 1'd1)) begin
            ap_phi_mux_conv3_i12_i_i933_pn_phi_fu_152_p4 = xf_bits_per_clock_fu_253_p3;
        end else if ((icmp_ln1324_fu_274_p2 == 1'd0)) begin
            ap_phi_mux_conv3_i12_i_i933_pn_phi_fu_152_p4 = xor_ln1333_fu_280_p2;
        end else begin
            ap_phi_mux_conv3_i12_i_i933_pn_phi_fu_152_p4 = ap_phi_reg_pp0_iter2_conv3_i12_i_i933_pn_reg_149;
        end
    end else begin
        ap_phi_mux_conv3_i12_i_i933_pn_phi_fu_152_p4 = ap_phi_reg_pp0_iter2_conv3_i12_i_i933_pn_reg_149;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1301_reg_437_pp0_iter2_reg == 1'd1))) begin
        filled_out_ap_vld = 1'b1;
    end else begin
        filled_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op65_write_state5 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        ldata_blk_n = ldata_full_n;
    end else begin
        ldata_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op65_write_state5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        ldata_write = 1'b1;
    end else begin
        ldata_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1301_reg_437_pp0_iter2_reg == 1'd1))) begin
        localbuffer_out_ap_vld = 1'b1;
    end else begin
        localbuffer_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op43_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        p_dstgx_data_blk_n = p_dstgx_data_empty_n;
    end else begin
        p_dstgx_data_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op43_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        p_dstgx_data_read = 1'b1;
    end else begin
        p_dstgx_data_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1301_fu_198_p2 = (indvar_flatten_fu_88 + 32'd1);

assign add_ln1306_fu_234_p2 = (select_ln1294_fu_212_p3 + 16'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((ap_predicate_op43_read_state3 == 1'b1) & (p_dstgx_data_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter4 = ((ap_predicate_op65_write_state5 == 1'b1) & (ldata_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_195 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_393 = ((icmp_ln1324_reg_466_pp0_iter3_reg == 1'd0) & (icmp_ln1301_reg_437_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1));
end

always @ (*) begin
    ap_condition_396 = ((icmp_ln1324_reg_466_pp0_iter3_reg == 1'd1) & (icmp_ln1301_reg_437_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign ap_phi_reg_pp0_iter0_val_1_reg_158 = 'bx;

assign ap_phi_reg_pp0_iter2_conv3_i12_i_i933_pn_reg_149 = 'bx;

always @ (*) begin
    ap_predicate_op43_read_state3 = ((icmp_ln1315_reg_446 == 1'd1) & (icmp_ln1301_reg_437 == 1'd0));
end

always @ (*) begin
    ap_predicate_op65_write_state5 = ((icmp_ln1324_reg_466_pp0_iter3_reg == 1'd0) & (icmp_ln1301_reg_437_pp0_iter3_reg == 1'd0));
end

assign bLast_fu_224_p2 = ((sub == zext_ln1306_fu_220_p1) ? 1'b1 : 1'b0);

assign filled_1cast_fu_298_p1 = filled_1_reg_450;

assign filled_next_fu_287_p2 = (ap_phi_mux_conv3_i12_i_i933_pn_phi_fu_152_p4 + filled_fu_76);

assign filled_out = filled_1_reg_450;

assign icmp_ln1301_fu_193_p2 = ((indvar_flatten_fu_88 == bound) ? 1'b1 : 1'b0);

assign icmp_ln1306_fu_207_p2 = ((j_fu_84 == empty) ? 1'b1 : 1'b0);

assign icmp_ln1315_fu_229_p2 = (($signed(zext_ln1306_fu_220_p1) < $signed(cols_bound_per_npc_load)) ? 1'b1 : 1'b0);

assign icmp_ln1324_fu_274_p2 = (($signed(sub_ln1324_fu_268_p2) > $signed(zext_ln1320_2_fu_264_p1)) ? 1'b1 : 1'b0);

assign ldata_din = (shl_ln1320_reg_470 | localbuffer_fu_80);

assign localbuffer_1_fu_333_p2 = (shl_ln1320_reg_470 | localbuffer_fu_80);

assign localbuffer_2_fu_361_p3 = ((tmp_13_reg_480[0:0] == 1'b1) ? shl_ln1332_fu_345_p2 : lshr_ln1332_fu_355_p2);

assign localbuffer_out = localbuffer_fu_80;

assign lshr_ln1332_fu_355_p2 = val_1_reg_158 >> sext_ln1332cast_fu_351_p1;

assign select_ln1294_fu_212_p3 = ((icmp_ln1306_fu_207_p2[0:0] == 1'b1) ? 16'd0 : j_fu_84);

assign sext_ln1332_fu_339_p1 = sub_ln1332_reg_475;

assign sext_ln1332cast_fu_351_p1 = sext_ln1332_fu_339_p1[7:0];

assign shl_ln1320_fu_301_p2 = ap_phi_reg_pp0_iter3_val_1_reg_158 << filled_1cast_fu_298_p1;

assign shl_ln1332_fu_345_p2 = val_1_reg_158 << zext_ln1332_fu_342_p1;

assign sub_ln1324_fu_268_p2 = (5'd8 - zext_ln1313_fu_260_p1);

assign sub_ln1332_1_fu_324_p2 = (3'd0 - trunc_ln1332_fu_312_p1);

assign sub_ln1332_fu_307_p2 = (5'd8 - zext_ln1320_2_reg_461);

assign trunc_ln1332_fu_312_p1 = sub_ln1332_fu_307_p2[2:0];

assign xf_bits_per_clock_fu_253_p3 = ((bLast_reg_441[0:0] == 1'b1) ? last_blk_width_load : 4'd8);

assign xor_ln1333_fu_280_p2 = (xf_bits_per_clock_fu_253_p3 ^ 4'd8);

assign zext_ln1306_fu_220_p1 = select_ln1294_fu_212_p3;

assign zext_ln1313_fu_260_p1 = xf_bits_per_clock_fu_253_p3;

assign zext_ln1320_2_fu_264_p1 = filled_fu_76;

assign zext_ln1332_fu_342_p1 = sub_ln1332_1_reg_485;

always @ (posedge ap_clk) begin
    zext_ln1320_2_reg_461[4] <= 1'b0;
end

endmodule //sobel_resize_accel_MatStream2AxiStream_2_Pipeline_MMIterOutRow_MMIterOutCol
