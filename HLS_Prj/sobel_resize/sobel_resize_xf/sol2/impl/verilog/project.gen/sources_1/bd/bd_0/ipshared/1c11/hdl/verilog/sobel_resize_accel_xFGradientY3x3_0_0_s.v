// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module sobel_resize_accel_xFGradientY3x3_0_0_s (
        ap_clk,
        ap_rst,
        t0_val,
        t1_val,
        t2_val,
        b0_val,
        b1_val,
        b2_val,
        ap_return,
        ap_ce
);


input   ap_clk;
input   ap_rst;
input  [7:0] t0_val;
input  [7:0] t1_val;
input  [7:0] t2_val;
input  [7:0] b0_val;
input  [7:0] b1_val;
input  [7:0] b2_val;
output  [7:0] ap_return;
input   ap_ce;

reg[7:0] ap_return;

reg   [7:0] b1_val_read_reg_205;
wire    ap_block_pp0_stage0_11001;
wire   [8:0] A00_fu_90_p2;
reg   [8:0] A00_reg_210;
wire   [9:0] add_ln113_fu_114_p2;
reg   [9:0] add_ln113_reg_215;
wire    ap_block_pp0_stage0;
wire   [8:0] M00_fu_70_p3;
wire   [8:0] zext_ln109_1_fu_86_p1;
wire   [8:0] zext_ln109_fu_82_p1;
wire   [8:0] zext_ln110_1_fu_100_p1;
wire   [8:0] zext_ln110_fu_96_p1;
wire   [8:0] S00_fu_104_p2;
wire   [9:0] zext_ln110_2_fu_110_p1;
wire   [9:0] zext_ln107_fu_78_p1;
wire   [8:0] M01_fu_120_p3;
wire   [10:0] zext_ln108_fu_127_p1;
wire   [10:0] zext_ln114_fu_134_p1;
wire   [10:0] out_pix_2_fu_137_p2;
wire   [10:0] zext_ln109_2_fu_131_p1;
wire   [10:0] out_pix_fu_143_p2;
wire   [2:0] tmp_1_fu_161_p4;
wire   [0:0] tmp_fu_153_p3;
wire   [0:0] xor_ln120_fu_177_p2;
wire   [0:0] icmp_ln122_fu_171_p2;
wire   [0:0] or_ln120_fu_191_p2;
wire   [7:0] select_ln120_fu_183_p3;
wire   [7:0] trunc_ln117_fu_149_p1;
wire   [7:0] select_ln120_1_fu_197_p3;
reg    ap_ce_reg;
reg   [7:0] ap_return_int_reg;

always @ (posedge ap_clk) begin
    ap_ce_reg <= ap_ce;
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1))) begin
        A00_reg_210 <= A00_fu_90_p2;
        add_ln113_reg_215 <= add_ln113_fu_114_p2;
        b1_val_read_reg_205 <= b1_val;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce_reg)) begin
        ap_return_int_reg <= select_ln120_1_fu_197_p3;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return = ap_return_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return = select_ln120_1_fu_197_p3;
    end else begin
        ap_return = 'bx;
    end
end

assign A00_fu_90_p2 = (zext_ln109_1_fu_86_p1 + zext_ln109_fu_82_p1);

assign M00_fu_70_p3 = {{t1_val}, {1'd0}};

assign M01_fu_120_p3 = {{b1_val_read_reg_205}, {1'd0}};

assign S00_fu_104_p2 = (zext_ln110_1_fu_100_p1 + zext_ln110_fu_96_p1);

assign add_ln113_fu_114_p2 = (zext_ln110_2_fu_110_p1 + zext_ln107_fu_78_p1);

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign icmp_ln122_fu_171_p2 = (($signed(tmp_1_fu_161_p4) > $signed(3'd0)) ? 1'b1 : 1'b0);

assign or_ln120_fu_191_p2 = (tmp_fu_153_p3 | icmp_ln122_fu_171_p2);

assign out_pix_2_fu_137_p2 = (zext_ln108_fu_127_p1 - zext_ln114_fu_134_p1);

assign out_pix_fu_143_p2 = (out_pix_2_fu_137_p2 + zext_ln109_2_fu_131_p1);

assign select_ln120_1_fu_197_p3 = ((or_ln120_fu_191_p2[0:0] == 1'b1) ? select_ln120_fu_183_p3 : trunc_ln117_fu_149_p1);

assign select_ln120_fu_183_p3 = ((xor_ln120_fu_177_p2[0:0] == 1'b1) ? 8'd255 : 8'd0);

assign tmp_1_fu_161_p4 = {{out_pix_fu_143_p2[10:8]}};

assign tmp_fu_153_p3 = out_pix_fu_143_p2[32'd10];

assign trunc_ln117_fu_149_p1 = out_pix_fu_143_p2[7:0];

assign xor_ln120_fu_177_p2 = (tmp_fu_153_p3 ^ 1'd1);

assign zext_ln107_fu_78_p1 = M00_fu_70_p3;

assign zext_ln108_fu_127_p1 = M01_fu_120_p3;

assign zext_ln109_1_fu_86_p1 = b2_val;

assign zext_ln109_2_fu_131_p1 = A00_reg_210;

assign zext_ln109_fu_82_p1 = b0_val;

assign zext_ln110_1_fu_100_p1 = t2_val;

assign zext_ln110_2_fu_110_p1 = S00_fu_104_p2;

assign zext_ln110_fu_96_p1 = t0_val;

assign zext_ln114_fu_134_p1 = add_ln113_reg_215;

endmodule //sobel_resize_accel_xFGradientY3x3_0_0_s
