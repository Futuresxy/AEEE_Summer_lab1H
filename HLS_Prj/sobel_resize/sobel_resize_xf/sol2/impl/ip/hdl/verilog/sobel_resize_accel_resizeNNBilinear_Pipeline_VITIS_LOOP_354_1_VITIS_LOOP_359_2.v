// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module sobel_resize_accel_resizeNNBilinear_Pipeline_VITIS_LOOP_354_1_VITIS_LOOP_359_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_mat_data_dout,
        in_mat_data_num_data_valid,
        in_mat_data_fifo_cap,
        in_mat_data_empty_n,
        in_mat_data_read,
        imgInput_cols_val,
        bound,
        line_buffer_1_address0,
        line_buffer_1_ce0,
        line_buffer_1_we0,
        line_buffer_1_d0,
        line_buffer_address0,
        line_buffer_ce0,
        line_buffer_we0,
        line_buffer_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] in_mat_data_dout;
input  [2:0] in_mat_data_num_data_valid;
input  [2:0] in_mat_data_fifo_cap;
input   in_mat_data_empty_n;
output   in_mat_data_read;
input  [31:0] imgInput_cols_val;
input  [32:0] bound;
output  [6:0] line_buffer_1_address0;
output   line_buffer_1_ce0;
output   line_buffer_1_we0;
output  [7:0] line_buffer_1_d0;
output  [6:0] line_buffer_address0;
output   line_buffer_ce0;
output   line_buffer_we0;
output  [7:0] line_buffer_d0;

reg ap_idle;
reg in_mat_data_read;
reg line_buffer_1_ce0;
reg line_buffer_1_we0;
reg line_buffer_ce0;
reg line_buffer_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln354_fu_152_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    in_mat_data_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
reg   [7:0] j_2_reg_247;
wire   [0:0] icmp_ln359_fu_147_p2;
reg   [0:0] icmp_ln359_reg_252;
wire   [63:0] zext_ln359_fu_194_p1;
reg   [7:0] j_fu_64;
wire   [7:0] add_ln359_fu_200_p2;
reg   [7:0] ap_sig_allocacmp_j_2;
wire    ap_loop_init;
reg   [1:0] i_fu_68;
wire   [1:0] select_ln354_1_fu_183_p3;
reg   [32:0] indvar_flatten_fu_72;
wire   [32:0] add_ln354_fu_157_p2;
wire   [0:0] trunc_ln354_fu_190_p1;
wire   [31:0] zext_ln359_1_fu_143_p1;
wire   [1:0] add_ln354_1_fu_177_p2;
wire   [7:0] select_ln354_fu_171_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 j_fu_64 = 8'd0;
#0 i_fu_68 = 2'd0;
#0 indvar_flatten_fu_72 = 33'd0;
#0 ap_done_reg = 1'b0;
end

sobel_resize_accel_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            i_fu_68 <= 2'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            i_fu_68 <= select_ln354_1_fu_183_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_72 <= 33'd0;
        end else if (((icmp_ln354_fu_152_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten_fu_72 <= add_ln354_fu_157_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            j_fu_64 <= 8'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            j_fu_64 <= add_ln359_fu_200_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln359_reg_252 <= icmp_ln359_fu_147_p2;
        j_2_reg_247 <= ap_sig_allocacmp_j_2;
    end
end

always @ (*) begin
    if (((icmp_ln354_fu_152_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_sig_allocacmp_j_2 = add_ln359_fu_200_p2;
    end else begin
        ap_sig_allocacmp_j_2 = j_fu_64;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        in_mat_data_blk_n = in_mat_data_empty_n;
    end else begin
        in_mat_data_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        in_mat_data_read = 1'b1;
    end else begin
        in_mat_data_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        line_buffer_1_ce0 = 1'b1;
    end else begin
        line_buffer_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln354_fu_190_p1 == 1'd1))) begin
        line_buffer_1_we0 = 1'b1;
    end else begin
        line_buffer_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        line_buffer_ce0 = 1'b1;
    end else begin
        line_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln354_fu_190_p1 == 1'd0))) begin
        line_buffer_we0 = 1'b1;
    end else begin
        line_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln354_1_fu_177_p2 = (i_fu_68 + 2'd1);

assign add_ln354_fu_157_p2 = (indvar_flatten_fu_72 + 33'd1);

assign add_ln359_fu_200_p2 = (select_ln354_fu_171_p3 + 8'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (in_mat_data_empty_n == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign icmp_ln354_fu_152_p2 = ((indvar_flatten_fu_72 == bound) ? 1'b1 : 1'b0);

assign icmp_ln359_fu_147_p2 = (($signed(zext_ln359_1_fu_143_p1) < $signed(imgInput_cols_val)) ? 1'b1 : 1'b0);

assign line_buffer_1_address0 = zext_ln359_fu_194_p1;

assign line_buffer_1_d0 = in_mat_data_dout;

assign line_buffer_address0 = zext_ln359_fu_194_p1;

assign line_buffer_d0 = in_mat_data_dout;

assign select_ln354_1_fu_183_p3 = ((icmp_ln359_reg_252[0:0] == 1'b1) ? i_fu_68 : add_ln354_1_fu_177_p2);

assign select_ln354_fu_171_p3 = ((icmp_ln359_reg_252[0:0] == 1'b1) ? j_2_reg_247 : 8'd0);

assign trunc_ln354_fu_190_p1 = select_ln354_1_fu_183_p3[0:0];

assign zext_ln359_1_fu_143_p1 = ap_sig_allocacmp_j_2;

assign zext_ln359_fu_194_p1 = select_ln354_fu_171_p3;

endmodule //sobel_resize_accel_resizeNNBilinear_Pipeline_VITIS_LOOP_354_1_VITIS_LOOP_359_2
