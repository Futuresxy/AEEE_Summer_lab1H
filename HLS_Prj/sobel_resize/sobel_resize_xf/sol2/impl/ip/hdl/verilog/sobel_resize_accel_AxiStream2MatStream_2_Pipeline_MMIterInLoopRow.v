// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module sobel_resize_accel_AxiStream2MatStream_2_Pipeline_MMIterInLoopRow (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ldata_dout,
        ldata_num_data_valid,
        ldata_fifo_cap,
        ldata_empty_n,
        ldata_read,
        in_mat_data_din,
        in_mat_data_num_data_valid,
        in_mat_data_fifo_cap,
        in_mat_data_full_n,
        in_mat_data_write,
        bound,
        empty,
        cols_bound_per_npc_load,
        sub,
        last_blk_width_load,
        sub3,
        last_blk_width_cast3
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] ldata_dout;
input  [2:0] ldata_num_data_valid;
input  [2:0] ldata_fifo_cap;
input   ldata_empty_n;
output   ldata_read;
output  [7:0] in_mat_data_din;
input  [2:0] in_mat_data_num_data_valid;
input  [2:0] in_mat_data_fifo_cap;
input   in_mat_data_full_n;
output   in_mat_data_write;
input  [31:0] bound;
input  [2:0] empty;
input  [31:0] cols_bound_per_npc_load;
input  [31:0] sub;
input  [3:0] last_blk_width_load;
input  [4:0] sub3;
input  [3:0] last_blk_width_cast3;

reg ap_idle;
reg ldata_read;
reg in_mat_data_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_idle_pp0;
reg   [0:0] icmp_ln1054_reg_693;
reg   [0:0] icmp_ln1054_reg_693_pp0_iter2_reg;
reg   [0:0] icmp_ln1065_reg_709;
reg    ap_predicate_op80_read_state4;
reg    ap_block_state4_pp0_stage0_iter3;
reg   [0:0] icmp_ln1084_reg_705;
reg   [0:0] icmp_ln1084_reg_705_pp0_iter4_reg;
reg    ap_block_state6_pp0_stage0_iter5;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln1054_fu_198_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    ldata_blk_n;
wire    ap_block_pp0_stage0;
reg    in_mat_data_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [4:0] last_blk_width_cast3_cast_fu_164_p1;
reg   [4:0] last_blk_width_cast3_cast_reg_688;
reg   [0:0] icmp_ln1054_reg_693_pp0_iter3_reg;
wire   [0:0] bLast_width_fu_209_p2;
reg   [0:0] bLast_width_reg_697;
reg   [0:0] bLast_width_reg_697_pp0_iter2_reg;
reg   [0:0] bLast_width_reg_697_pp0_iter3_reg;
reg   [0:0] bLast_width_reg_697_pp0_iter4_reg;
wire   [0:0] icmp_ln1084_fu_214_p2;
reg   [0:0] icmp_ln1084_reg_705_pp0_iter2_reg;
reg   [0:0] icmp_ln1084_reg_705_pp0_iter3_reg;
wire   [0:0] icmp_ln1065_fu_270_p2;
reg   [0:0] icmp_ln1065_reg_709_pp0_iter3_reg;
wire   [0:0] icmp_ln1074_fu_304_p2;
reg   [0:0] icmp_ln1074_reg_713;
reg   [0:0] icmp_ln1074_reg_713_pp0_iter3_reg;
wire   [2:0] trunc_ln1074_fu_310_p1;
reg   [2:0] trunc_ln1074_reg_720;
reg   [2:0] trunc_ln1074_reg_720_pp0_iter3_reg;
wire   [2:0] trunc_ln1074_1_fu_314_p1;
reg   [2:0] trunc_ln1074_1_reg_728;
reg   [2:0] trunc_ln1074_1_reg_728_pp0_iter3_reg;
wire   [0:0] icmp_ln1066_fu_329_p2;
reg   [0:0] icmp_ln1066_reg_734;
reg   [0:0] icmp_ln1066_reg_734_pp0_iter3_reg;
wire   [2:0] trunc_ln1067_fu_335_p1;
reg   [2:0] trunc_ln1067_reg_739;
reg   [2:0] trunc_ln1067_reg_739_pp0_iter3_reg;
wire   [2:0] trunc_ln1071_fu_349_p1;
reg   [2:0] trunc_ln1071_reg_749;
reg   [2:0] trunc_ln1071_reg_749_pp0_iter3_reg;
wire   [0:0] icmp_ln1071_fu_353_p2;
reg   [0:0] icmp_ln1071_reg_756;
reg   [0:0] icmp_ln1071_reg_756_pp0_iter3_reg;
wire   [7:0] lshr_ln1074_fu_405_p2;
reg   [7:0] lshr_ln1074_reg_764;
wire   [7:0] localbuffer_fu_420_p2;
reg   [7:0] localbuffer_reg_769;
wire   [7:0] shl_ln1071_fu_467_p2;
reg   [7:0] shl_ln1071_reg_774;
wire   [7:0] localbuffer_5_fu_509_p2;
wire   [7:0] localbuffer_4_fu_595_p2;
wire   [2:0] sub_ln1082_fu_601_p2;
reg   [2:0] sub_ln1082_reg_790;
reg    ap_condition_exit_pp0_iter2_stage0;
wire   [7:0] ap_phi_reg_pp0_iter0_localbuffer_1_reg_155;
reg   [7:0] ap_phi_reg_pp0_iter1_localbuffer_1_reg_155;
reg   [7:0] ap_phi_reg_pp0_iter2_localbuffer_1_reg_155;
reg   [7:0] ap_phi_reg_pp0_iter3_localbuffer_1_reg_155;
reg   [7:0] ap_phi_reg_pp0_iter4_localbuffer_1_reg_155;
reg   [7:0] ap_phi_reg_pp0_iter5_localbuffer_1_reg_155;
reg   [31:0] rem_fu_84;
wire   [31:0] rem_3_fu_318_p2;
wire   [31:0] rem_2_fu_359_p2;
wire    ap_loop_init;
reg   [30:0] i_fu_88;
wire   [30:0] add_ln1054_fu_203_p2;
reg   [31:0] j_fu_92;
wire   [31:0] j_4_fu_225_p3;
reg   [7:0] val_fu_96;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] zext_ln1054_fu_194_p1;
wire   [31:0] add_ln1086_fu_219_p2;
wire   [3:0] xf_bits_per_clock_fu_246_p3;
wire   [4:0] ptr_width_minus_fu_260_p3;
wire   [31:0] zext_ln1060_fu_252_p1;
wire   [4:0] add_ln1074_fu_276_p2;
wire   [4:0] select_ln1074_fu_281_p3;
wire   [31:0] zext_ln1074_fu_288_p1;
wire   [31:0] sub_ln1074_1_fu_298_p2;
wire   [31:0] sub_ln1074_fu_292_p2;
wire   [4:0] zext_ln1060_1_fu_256_p1;
wire  signed [4:0] add_ln1071_fu_339_p2;
wire  signed [31:0] sext_ln1071_fu_345_p1;
wire  signed [31:0] sext_ln1061_fu_266_p1;
reg   [7:0] tmp_15_fu_373_p4;
wire   [2:0] xor_ln1074_fu_383_p2;
wire   [2:0] select_ln1074_3_fu_395_p3;
wire   [7:0] select_ln1074_2_fu_388_p3;
wire   [7:0] zext_ln1074_1_fu_401_p1;
wire   [2:0] sub_ln1067_fu_411_p2;
wire   [7:0] zext_ln1067_fu_416_p1;
wire   [2:0] sub_ln1071_fu_426_p2;
wire   [2:0] xor_ln1071_fu_430_p2;
wire   [7:0] zext_ln1071_fu_436_p1;
wire   [7:0] lshr_ln1071_fu_440_p2;
wire   [2:0] xor_ln1071_1_fu_452_p2;
wire   [2:0] select_ln1071_2_fu_457_p3;
wire   [7:0] and_ln1071_fu_446_p2;
wire   [7:0] zext_ln1071_1_fu_463_p1;
wire   [2:0] sub_ln1074_2_fu_478_p2;
wire   [2:0] sub_ln1074_3_fu_482_p2;
wire   [2:0] select_ln1074_1_fu_486_p3;
wire   [2:0] xor_ln1074_1_fu_493_p2;
wire   [7:0] zext_ln1074_2_fu_499_p1;
wire   [7:0] lshr_ln1074_1_fu_503_p2;
wire   [2:0] select_ln1071_fu_520_p3;
wire   [2:0] select_ln1071_1_fu_525_p3;
wire   [2:0] xor_ln1071_2_fu_530_p2;
reg   [7:0] tmp_14_fu_544_p4;
wire   [7:0] zext_ln1071_2_fu_536_p1;
wire   [7:0] zext_ln1071_3_fu_540_p1;
wire   [7:0] shl_ln1071_1_fu_559_p2;
wire   [7:0] lshr_ln1071_1_fu_565_p2;
wire   [7:0] and_ln1071_1_fu_571_p2;
wire   [7:0] localbuffer_3_fu_514_p3;
wire   [7:0] xor_ln1071_3_fu_577_p2;
wire   [7:0] select_ln1071_3_fu_553_p3;
wire   [7:0] and_ln1071_2_fu_583_p2;
wire   [7:0] and_ln1071_3_fu_589_p2;
wire   [7:0] zext_ln1082_fu_606_p1;
wire   [7:0] lshr_ln1082_fu_609_p2;
wire   [7:0] select_ln1059_fu_615_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_613;
reg    ap_condition_616;
reg    ap_condition_619;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 rem_fu_84 = 32'd0;
#0 i_fu_88 = 31'd0;
#0 j_fu_92 = 32'd0;
#0 val_fu_96 = 8'd0;
#0 ap_done_reg = 1'b0;
end

sobel_resize_accel_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter2_stage0)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        if (((icmp_ln1065_reg_709_pp0_iter3_reg == 1'd0) & (icmp_ln1054_reg_693_pp0_iter3_reg == 1'd1))) begin
            ap_phi_reg_pp0_iter5_localbuffer_1_reg_155 <= localbuffer_5_fu_509_p2;
        end else if (((icmp_ln1065_reg_709_pp0_iter3_reg == 1'd1) & (icmp_ln1054_reg_693_pp0_iter3_reg == 1'd1))) begin
            ap_phi_reg_pp0_iter5_localbuffer_1_reg_155 <= localbuffer_4_fu_595_p2;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter5_localbuffer_1_reg_155 <= ap_phi_reg_pp0_iter4_localbuffer_1_reg_155;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_fu_88 <= 31'd0;
        end else if (((icmp_ln1054_fu_198_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_fu_88 <= add_ln1054_fu_203_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            j_fu_92 <= 32'd0;
        end else if (((icmp_ln1054_fu_198_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            j_fu_92 <= j_4_fu_225_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            rem_fu_84 <= 32'd0;
        end else if ((1'b1 == ap_condition_616)) begin
            rem_fu_84 <= rem_2_fu_359_p2;
        end else if ((1'b1 == ap_condition_613)) begin
            rem_fu_84 <= rem_3_fu_318_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            val_fu_96 <= 8'd0;
        end else if ((1'b1 == ap_condition_619)) begin
            val_fu_96 <= ldata_dout;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        bLast_width_reg_697 <= bLast_width_fu_209_p2;
        icmp_ln1054_reg_693 <= icmp_ln1054_fu_198_p2;
        icmp_ln1084_reg_705 <= icmp_ln1084_fu_214_p2;
        last_blk_width_cast3_cast_reg_688[3 : 0] <= last_blk_width_cast3_cast_fu_164_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        bLast_width_reg_697_pp0_iter2_reg <= bLast_width_reg_697;
        bLast_width_reg_697_pp0_iter3_reg <= bLast_width_reg_697_pp0_iter2_reg;
        bLast_width_reg_697_pp0_iter4_reg <= bLast_width_reg_697_pp0_iter3_reg;
        icmp_ln1054_reg_693_pp0_iter2_reg <= icmp_ln1054_reg_693;
        icmp_ln1054_reg_693_pp0_iter3_reg <= icmp_ln1054_reg_693_pp0_iter2_reg;
        icmp_ln1065_reg_709 <= icmp_ln1065_fu_270_p2;
        icmp_ln1065_reg_709_pp0_iter3_reg <= icmp_ln1065_reg_709;
        icmp_ln1066_reg_734 <= icmp_ln1066_fu_329_p2;
        icmp_ln1066_reg_734_pp0_iter3_reg <= icmp_ln1066_reg_734;
        icmp_ln1071_reg_756 <= icmp_ln1071_fu_353_p2;
        icmp_ln1071_reg_756_pp0_iter3_reg <= icmp_ln1071_reg_756;
        icmp_ln1074_reg_713 <= icmp_ln1074_fu_304_p2;
        icmp_ln1074_reg_713_pp0_iter3_reg <= icmp_ln1074_reg_713;
        icmp_ln1084_reg_705_pp0_iter2_reg <= icmp_ln1084_reg_705;
        icmp_ln1084_reg_705_pp0_iter3_reg <= icmp_ln1084_reg_705_pp0_iter2_reg;
        icmp_ln1084_reg_705_pp0_iter4_reg <= icmp_ln1084_reg_705_pp0_iter3_reg;
        localbuffer_reg_769 <= localbuffer_fu_420_p2;
        lshr_ln1074_reg_764 <= lshr_ln1074_fu_405_p2;
        shl_ln1071_reg_774 <= shl_ln1071_fu_467_p2;
        sub_ln1082_reg_790 <= sub_ln1082_fu_601_p2;
        trunc_ln1067_reg_739 <= trunc_ln1067_fu_335_p1;
        trunc_ln1067_reg_739_pp0_iter3_reg <= trunc_ln1067_reg_739;
        trunc_ln1071_reg_749 <= trunc_ln1071_fu_349_p1;
        trunc_ln1071_reg_749_pp0_iter3_reg <= trunc_ln1071_reg_749;
        trunc_ln1074_1_reg_728 <= trunc_ln1074_1_fu_314_p1;
        trunc_ln1074_1_reg_728_pp0_iter3_reg <= trunc_ln1074_1_reg_728;
        trunc_ln1074_reg_720 <= trunc_ln1074_fu_310_p1;
        trunc_ln1074_reg_720_pp0_iter3_reg <= trunc_ln1074_reg_720;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_localbuffer_1_reg_155 <= ap_phi_reg_pp0_iter0_localbuffer_1_reg_155;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter2_localbuffer_1_reg_155 <= ap_phi_reg_pp0_iter1_localbuffer_1_reg_155;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_phi_reg_pp0_iter3_localbuffer_1_reg_155 <= ap_phi_reg_pp0_iter2_localbuffer_1_reg_155;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_phi_reg_pp0_iter4_localbuffer_1_reg_155 <= ap_phi_reg_pp0_iter3_localbuffer_1_reg_155;
    end
end

always @ (*) begin
    if (((icmp_ln1054_fu_198_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln1054_reg_693 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1084_reg_705_pp0_iter4_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        in_mat_data_blk_n = in_mat_data_full_n;
    end else begin
        in_mat_data_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln1084_reg_705_pp0_iter4_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        in_mat_data_write = 1'b1;
    end else begin
        in_mat_data_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op80_read_state4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ldata_blk_n = ldata_empty_n;
    end else begin
        ldata_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op80_read_state4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ldata_read = 1'b1;
    end else begin
        ldata_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1054_fu_203_p2 = (i_fu_88 + 31'd1);

assign add_ln1071_fu_339_p2 = ($signed(zext_ln1060_1_fu_256_p1) + $signed(5'd31));

assign add_ln1074_fu_276_p2 = (last_blk_width_cast3_cast_reg_688 + 5'd7);

assign add_ln1086_fu_219_p2 = (j_fu_92 + 32'd1);

assign and_ln1071_1_fu_571_p2 = (shl_ln1071_1_fu_559_p2 & lshr_ln1071_1_fu_565_p2);

assign and_ln1071_2_fu_583_p2 = (xor_ln1071_3_fu_577_p2 & localbuffer_3_fu_514_p3);

assign and_ln1071_3_fu_589_p2 = (select_ln1071_3_fu_553_p3 & and_ln1071_1_fu_571_p2);

assign and_ln1071_fu_446_p2 = (lshr_ln1071_fu_440_p2 & ldata_dout);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_block_state6_pp0_stage0_iter5)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_block_state6_pp0_stage0_iter5)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_block_state6_pp0_stage0_iter5)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = ((ap_predicate_op80_read_state4 == 1'b1) & (ldata_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state6_pp0_stage0_iter5 = ((icmp_ln1084_reg_705_pp0_iter4_reg == 1'd1) & (in_mat_data_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_613 = ((icmp_ln1054_reg_693 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln1065_fu_270_p2 == 1'd0));
end

always @ (*) begin
    ap_condition_616 = ((icmp_ln1054_reg_693 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln1065_fu_270_p2 == 1'd1));
end

always @ (*) begin
    ap_condition_619 = ((icmp_ln1065_reg_709 == 1'd1) & (icmp_ln1054_reg_693_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign ap_phi_reg_pp0_iter0_localbuffer_1_reg_155 = 'bx;

always @ (*) begin
    ap_predicate_op80_read_state4 = ((icmp_ln1065_reg_709 == 1'd1) & (icmp_ln1054_reg_693_pp0_iter2_reg == 1'd1));
end

assign bLast_width_fu_209_p2 = ((j_fu_92 == sub) ? 1'b1 : 1'b0);

assign icmp_ln1054_fu_198_p2 = (($signed(zext_ln1054_fu_194_p1) < $signed(bound)) ? 1'b1 : 1'b0);

assign icmp_ln1065_fu_270_p2 = (($signed(rem_fu_84) < $signed(zext_ln1060_fu_252_p1)) ? 1'b1 : 1'b0);

assign icmp_ln1066_fu_329_p2 = ((rem_fu_84 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln1071_fu_353_p2 = ((rem_fu_84 > sext_ln1071_fu_345_p1) ? 1'b1 : 1'b0);

assign icmp_ln1074_fu_304_p2 = ((sub_ln1074_1_fu_298_p2 > sub_ln1074_fu_292_p2) ? 1'b1 : 1'b0);

assign icmp_ln1084_fu_214_p2 = (($signed(j_fu_92) < $signed(cols_bound_per_npc_load)) ? 1'b1 : 1'b0);

assign in_mat_data_din = (select_ln1059_fu_615_p3 & ap_phi_reg_pp0_iter5_localbuffer_1_reg_155);

assign j_4_fu_225_p3 = ((bLast_width_fu_209_p2[0:0] == 1'b1) ? 32'd0 : add_ln1086_fu_219_p2);

assign last_blk_width_cast3_cast_fu_164_p1 = last_blk_width_cast3;

assign localbuffer_3_fu_514_p3 = ((icmp_ln1066_reg_734_pp0_iter3_reg[0:0] == 1'b1) ? 8'd0 : localbuffer_reg_769);

assign localbuffer_4_fu_595_p2 = (and_ln1071_3_fu_589_p2 | and_ln1071_2_fu_583_p2);

assign localbuffer_5_fu_509_p2 = (lshr_ln1074_reg_764 & lshr_ln1074_1_fu_503_p2);

assign localbuffer_fu_420_p2 = val_fu_96 >> zext_ln1067_fu_416_p1;

assign lshr_ln1071_1_fu_565_p2 = 8'd255 >> zext_ln1071_3_fu_540_p1;

assign lshr_ln1071_fu_440_p2 = 8'd255 >> zext_ln1071_fu_436_p1;

assign lshr_ln1074_1_fu_503_p2 = 8'd255 >> zext_ln1074_2_fu_499_p1;

assign lshr_ln1074_fu_405_p2 = select_ln1074_2_fu_388_p3 >> zext_ln1074_1_fu_401_p1;

assign lshr_ln1082_fu_609_p2 = 8'd255 >> zext_ln1082_fu_606_p1;

assign ptr_width_minus_fu_260_p3 = ((bLast_width_reg_697[0:0] == 1'b1) ? sub3 : 5'd0);

assign rem_2_fu_359_p2 = ($signed(rem_fu_84) + $signed(sext_ln1061_fu_266_p1));

assign rem_3_fu_318_p2 = (rem_fu_84 - zext_ln1060_fu_252_p1);

assign select_ln1059_fu_615_p3 = ((bLast_width_reg_697_pp0_iter4_reg[0:0] == 1'b1) ? lshr_ln1082_fu_609_p2 : 8'd255);

assign select_ln1071_1_fu_525_p3 = ((icmp_ln1071_reg_756_pp0_iter3_reg[0:0] == 1'b1) ? trunc_ln1071_reg_749_pp0_iter3_reg : trunc_ln1067_reg_739_pp0_iter3_reg);

assign select_ln1071_2_fu_457_p3 = ((icmp_ln1071_reg_756[0:0] == 1'b1) ? xor_ln1071_1_fu_452_p2 : trunc_ln1067_reg_739);

assign select_ln1071_3_fu_553_p3 = ((icmp_ln1071_reg_756_pp0_iter3_reg[0:0] == 1'b1) ? tmp_14_fu_544_p4 : shl_ln1071_reg_774);

assign select_ln1071_fu_520_p3 = ((icmp_ln1071_reg_756_pp0_iter3_reg[0:0] == 1'b1) ? trunc_ln1067_reg_739_pp0_iter3_reg : trunc_ln1071_reg_749_pp0_iter3_reg);

assign select_ln1074_1_fu_486_p3 = ((icmp_ln1074_reg_713_pp0_iter3_reg[0:0] == 1'b1) ? sub_ln1074_2_fu_478_p2 : sub_ln1074_3_fu_482_p2);

assign select_ln1074_2_fu_388_p3 = ((icmp_ln1074_reg_713[0:0] == 1'b1) ? tmp_15_fu_373_p4 : val_fu_96);

assign select_ln1074_3_fu_395_p3 = ((icmp_ln1074_reg_713[0:0] == 1'b1) ? xor_ln1074_fu_383_p2 : trunc_ln1074_reg_720);

assign select_ln1074_fu_281_p3 = ((bLast_width_reg_697[0:0] == 1'b1) ? add_ln1074_fu_276_p2 : 5'd15);

assign sext_ln1061_fu_266_p1 = $signed(ptr_width_minus_fu_260_p3);

assign sext_ln1071_fu_345_p1 = add_ln1071_fu_339_p2;

assign shl_ln1071_1_fu_559_p2 = 8'd255 << zext_ln1071_2_fu_536_p1;

assign shl_ln1071_fu_467_p2 = and_ln1071_fu_446_p2 << zext_ln1071_1_fu_463_p1;

assign sub_ln1067_fu_411_p2 = (3'd0 - trunc_ln1067_reg_739);

assign sub_ln1071_fu_426_p2 = (trunc_ln1071_reg_749 - trunc_ln1067_reg_739);

assign sub_ln1074_1_fu_298_p2 = (32'd8 - rem_fu_84);

assign sub_ln1074_2_fu_478_p2 = (trunc_ln1074_reg_720_pp0_iter3_reg - trunc_ln1074_1_reg_728_pp0_iter3_reg);

assign sub_ln1074_3_fu_482_p2 = (trunc_ln1074_1_reg_728_pp0_iter3_reg - trunc_ln1074_reg_720_pp0_iter3_reg);

assign sub_ln1074_fu_292_p2 = (zext_ln1074_fu_288_p1 - rem_fu_84);

assign sub_ln1082_fu_601_p2 = (3'd0 - empty);

integer ap_tvar_int_0;

always @ (shl_ln1071_reg_774) begin
    for (ap_tvar_int_0 = 8 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 7 - 0) begin
            tmp_14_fu_544_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_14_fu_544_p4[ap_tvar_int_0] = shl_ln1071_reg_774[7 - ap_tvar_int_0];
        end
    end
end

integer ap_tvar_int_1;

always @ (val_fu_96) begin
    for (ap_tvar_int_1 = 8 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 7 - 0) begin
            tmp_15_fu_373_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_15_fu_373_p4[ap_tvar_int_1] = val_fu_96[7 - ap_tvar_int_1];
        end
    end
end

assign trunc_ln1067_fu_335_p1 = rem_fu_84[2:0];

assign trunc_ln1071_fu_349_p1 = add_ln1071_fu_339_p2[2:0];

assign trunc_ln1074_1_fu_314_p1 = sub_ln1074_fu_292_p2[2:0];

assign trunc_ln1074_fu_310_p1 = sub_ln1074_1_fu_298_p2[2:0];

assign xf_bits_per_clock_fu_246_p3 = ((bLast_width_reg_697[0:0] == 1'b1) ? last_blk_width_load : 4'd8);

assign xor_ln1071_1_fu_452_p2 = (trunc_ln1067_reg_739 ^ 3'd7);

assign xor_ln1071_2_fu_530_p2 = (select_ln1071_fu_520_p3 ^ 3'd7);

assign xor_ln1071_3_fu_577_p2 = (8'd255 ^ and_ln1071_1_fu_571_p2);

assign xor_ln1071_fu_430_p2 = (sub_ln1071_fu_426_p2 ^ 3'd7);

assign xor_ln1074_1_fu_493_p2 = (select_ln1074_1_fu_486_p3 ^ 3'd7);

assign xor_ln1074_fu_383_p2 = (trunc_ln1074_reg_720 ^ 3'd7);

assign zext_ln1054_fu_194_p1 = i_fu_88;

assign zext_ln1060_1_fu_256_p1 = xf_bits_per_clock_fu_246_p3;

assign zext_ln1060_fu_252_p1 = xf_bits_per_clock_fu_246_p3;

assign zext_ln1067_fu_416_p1 = sub_ln1067_fu_411_p2;

assign zext_ln1071_1_fu_463_p1 = select_ln1071_2_fu_457_p3;

assign zext_ln1071_2_fu_536_p1 = select_ln1071_1_fu_525_p3;

assign zext_ln1071_3_fu_540_p1 = xor_ln1071_2_fu_530_p2;

assign zext_ln1071_fu_436_p1 = xor_ln1071_fu_430_p2;

assign zext_ln1074_1_fu_401_p1 = select_ln1074_3_fu_395_p3;

assign zext_ln1074_2_fu_499_p1 = xor_ln1074_1_fu_493_p2;

assign zext_ln1074_fu_288_p1 = select_ln1074_fu_281_p3;

assign zext_ln1082_fu_606_p1 = sub_ln1082_reg_790;

always @ (posedge ap_clk) begin
    last_blk_width_cast3_cast_reg_688[4] <= 1'b0;
end

endmodule //sobel_resize_accel_AxiStream2MatStream_2_Pipeline_MMIterInLoopRow
