-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sobel_resize_accel_AxiStream2MatStream_2_Pipeline_MMIterInLoopRow is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ldata_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    ldata_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    ldata_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    ldata_empty_n : IN STD_LOGIC;
    ldata_read : OUT STD_LOGIC;
    in_mat_data_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    in_mat_data_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    in_mat_data_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    in_mat_data_full_n : IN STD_LOGIC;
    in_mat_data_write : OUT STD_LOGIC;
    bound : IN STD_LOGIC_VECTOR (31 downto 0);
    empty : IN STD_LOGIC_VECTOR (2 downto 0);
    cols_bound_per_npc_load : IN STD_LOGIC_VECTOR (31 downto 0);
    sub : IN STD_LOGIC_VECTOR (31 downto 0);
    last_blk_width_load : IN STD_LOGIC_VECTOR (3 downto 0);
    sub3 : IN STD_LOGIC_VECTOR (4 downto 0);
    last_blk_width_cast3 : IN STD_LOGIC_VECTOR (3 downto 0) );
end;


architecture behav of sobel_resize_accel_AxiStream2MatStream_2_Pipeline_MMIterInLoopRow is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal icmp_ln1054_reg_693 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1054_reg_693_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1065_reg_709 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op80_read_state4 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal icmp_ln1084_reg_705 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1084_reg_705_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln1054_fu_198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ldata_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal in_mat_data_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal last_blk_width_cast3_cast_fu_164_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal last_blk_width_cast3_cast_reg_688 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln1054_reg_693_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal bLast_width_fu_209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bLast_width_reg_697 : STD_LOGIC_VECTOR (0 downto 0);
    signal bLast_width_reg_697_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal bLast_width_reg_697_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal bLast_width_reg_697_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1084_fu_214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1084_reg_705_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1084_reg_705_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1065_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1065_reg_709_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1074_fu_304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1074_reg_713 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1074_reg_713_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1074_fu_310_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln1074_reg_720 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln1074_reg_720_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln1074_1_fu_314_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln1074_1_reg_728 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln1074_1_reg_728_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln1066_fu_329_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1066_reg_734 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1066_reg_734_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1067_fu_335_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln1067_reg_739 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln1067_reg_739_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln1071_fu_349_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln1071_reg_749 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln1071_reg_749_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln1071_fu_353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1071_reg_756 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1071_reg_756_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln1074_fu_405_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln1074_reg_764 : STD_LOGIC_VECTOR (7 downto 0);
    signal localbuffer_fu_420_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal localbuffer_reg_769 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln1071_fu_467_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln1071_reg_774 : STD_LOGIC_VECTOR (7 downto 0);
    signal localbuffer_5_fu_509_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal localbuffer_4_fu_595_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln1082_fu_601_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal sub_ln1082_reg_790 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_condition_exit_pp0_iter2_stage0 : STD_LOGIC;
    signal ap_phi_reg_pp0_iter0_localbuffer_1_reg_155 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter1_localbuffer_1_reg_155 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter2_localbuffer_1_reg_155 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter3_localbuffer_1_reg_155 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter4_localbuffer_1_reg_155 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter5_localbuffer_1_reg_155 : STD_LOGIC_VECTOR (7 downto 0);
    signal rem_fu_84 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal rem_3_fu_318_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal rem_2_fu_359_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal i_fu_88 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    signal add_ln1054_fu_203_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_fu_92 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal j_4_fu_225_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_fu_96 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal zext_ln1054_fu_194_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1086_fu_219_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xf_bits_per_clock_fu_246_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ptr_width_minus_fu_260_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln1060_fu_252_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1074_fu_276_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln1074_fu_281_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln1074_fu_288_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1074_1_fu_298_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1074_fu_292_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1060_1_fu_256_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln1071_fu_339_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln1071_fu_345_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1061_fu_266_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_373_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln1074_fu_383_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln1074_3_fu_395_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln1074_2_fu_388_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1074_1_fu_401_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln1067_fu_411_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln1067_fu_416_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln1071_fu_426_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal xor_ln1071_fu_430_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln1071_fu_436_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln1071_fu_440_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln1071_1_fu_452_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln1071_2_fu_457_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln1071_fu_446_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1071_1_fu_463_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln1074_2_fu_478_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal sub_ln1074_3_fu_482_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln1074_1_fu_486_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal xor_ln1074_1_fu_493_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln1074_2_fu_499_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln1074_1_fu_503_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln1071_fu_520_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln1071_1_fu_525_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal xor_ln1071_2_fu_530_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_14_fu_544_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1071_2_fu_536_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1071_3_fu_540_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln1071_1_fu_559_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln1071_1_fu_565_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln1071_1_fu_571_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal localbuffer_3_fu_514_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln1071_3_fu_577_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln1071_3_fu_553_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln1071_2_fu_583_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln1071_3_fu_589_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1082_fu_606_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln1082_fu_609_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln1059_fu_615_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_613 : BOOLEAN;
    signal ap_condition_616 : BOOLEAN;
    signal ap_condition_619 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component sobel_resize_accel_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component sobel_resize_accel_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage0)) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter5_localbuffer_1_reg_155_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then
                if (((icmp_ln1065_reg_709_pp0_iter3_reg = ap_const_lv1_0) and (icmp_ln1054_reg_693_pp0_iter3_reg = ap_const_lv1_1))) then 
                    ap_phi_reg_pp0_iter5_localbuffer_1_reg_155 <= localbuffer_5_fu_509_p2;
                elsif (((icmp_ln1065_reg_709_pp0_iter3_reg = ap_const_lv1_1) and (icmp_ln1054_reg_693_pp0_iter3_reg = ap_const_lv1_1))) then 
                    ap_phi_reg_pp0_iter5_localbuffer_1_reg_155 <= localbuffer_4_fu_595_p2;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter5_localbuffer_1_reg_155 <= ap_phi_reg_pp0_iter4_localbuffer_1_reg_155;
                end if;
            end if; 
        end if;
    end process;

    i_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_88 <= ap_const_lv31_0;
                elsif (((icmp_ln1054_fu_198_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    i_fu_88 <= add_ln1054_fu_203_p2;
                end if;
            end if; 
        end if;
    end process;

    j_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_92 <= ap_const_lv32_0;
                elsif (((icmp_ln1054_fu_198_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    j_fu_92 <= j_4_fu_225_p3;
                end if;
            end if; 
        end if;
    end process;

    rem_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    rem_fu_84 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_condition_616)) then 
                    rem_fu_84 <= rem_2_fu_359_p2;
                elsif ((ap_const_boolean_1 = ap_condition_613)) then 
                    rem_fu_84 <= rem_3_fu_318_p2;
                end if;
            end if; 
        end if;
    end process;

    val_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    val_fu_96 <= ap_const_lv8_0;
                elsif ((ap_const_boolean_1 = ap_condition_619)) then 
                    val_fu_96 <= ldata_dout;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                bLast_width_reg_697 <= bLast_width_fu_209_p2;
                icmp_ln1054_reg_693 <= icmp_ln1054_fu_198_p2;
                icmp_ln1084_reg_705 <= icmp_ln1084_fu_214_p2;
                    last_blk_width_cast3_cast_reg_688(3 downto 0) <= last_blk_width_cast3_cast_fu_164_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                bLast_width_reg_697_pp0_iter2_reg <= bLast_width_reg_697;
                bLast_width_reg_697_pp0_iter3_reg <= bLast_width_reg_697_pp0_iter2_reg;
                bLast_width_reg_697_pp0_iter4_reg <= bLast_width_reg_697_pp0_iter3_reg;
                icmp_ln1054_reg_693_pp0_iter2_reg <= icmp_ln1054_reg_693;
                icmp_ln1054_reg_693_pp0_iter3_reg <= icmp_ln1054_reg_693_pp0_iter2_reg;
                icmp_ln1065_reg_709 <= icmp_ln1065_fu_270_p2;
                icmp_ln1065_reg_709_pp0_iter3_reg <= icmp_ln1065_reg_709;
                icmp_ln1066_reg_734 <= icmp_ln1066_fu_329_p2;
                icmp_ln1066_reg_734_pp0_iter3_reg <= icmp_ln1066_reg_734;
                icmp_ln1071_reg_756 <= icmp_ln1071_fu_353_p2;
                icmp_ln1071_reg_756_pp0_iter3_reg <= icmp_ln1071_reg_756;
                icmp_ln1074_reg_713 <= icmp_ln1074_fu_304_p2;
                icmp_ln1074_reg_713_pp0_iter3_reg <= icmp_ln1074_reg_713;
                icmp_ln1084_reg_705_pp0_iter2_reg <= icmp_ln1084_reg_705;
                icmp_ln1084_reg_705_pp0_iter3_reg <= icmp_ln1084_reg_705_pp0_iter2_reg;
                icmp_ln1084_reg_705_pp0_iter4_reg <= icmp_ln1084_reg_705_pp0_iter3_reg;
                localbuffer_reg_769 <= localbuffer_fu_420_p2;
                lshr_ln1074_reg_764 <= lshr_ln1074_fu_405_p2;
                shl_ln1071_reg_774 <= shl_ln1071_fu_467_p2;
                sub_ln1082_reg_790 <= sub_ln1082_fu_601_p2;
                trunc_ln1067_reg_739 <= trunc_ln1067_fu_335_p1;
                trunc_ln1067_reg_739_pp0_iter3_reg <= trunc_ln1067_reg_739;
                trunc_ln1071_reg_749 <= trunc_ln1071_fu_349_p1;
                trunc_ln1071_reg_749_pp0_iter3_reg <= trunc_ln1071_reg_749;
                trunc_ln1074_1_reg_728 <= trunc_ln1074_1_fu_314_p1;
                trunc_ln1074_1_reg_728_pp0_iter3_reg <= trunc_ln1074_1_reg_728;
                trunc_ln1074_reg_720 <= trunc_ln1074_fu_310_p1;
                trunc_ln1074_reg_720_pp0_iter3_reg <= trunc_ln1074_reg_720;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_phi_reg_pp0_iter1_localbuffer_1_reg_155 <= ap_phi_reg_pp0_iter0_localbuffer_1_reg_155;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_phi_reg_pp0_iter2_localbuffer_1_reg_155 <= ap_phi_reg_pp0_iter1_localbuffer_1_reg_155;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter3_localbuffer_1_reg_155 <= ap_phi_reg_pp0_iter2_localbuffer_1_reg_155;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter4_localbuffer_1_reg_155 <= ap_phi_reg_pp0_iter3_localbuffer_1_reg_155;
            end if;
        end if;
    end process;
    last_blk_width_cast3_cast_reg_688(4) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln1054_fu_203_p2 <= std_logic_vector(unsigned(i_fu_88) + unsigned(ap_const_lv31_1));
    add_ln1071_fu_339_p2 <= std_logic_vector(unsigned(zext_ln1060_1_fu_256_p1) + unsigned(ap_const_lv5_1F));
    add_ln1074_fu_276_p2 <= std_logic_vector(unsigned(last_blk_width_cast3_cast_reg_688) + unsigned(ap_const_lv5_7));
    add_ln1086_fu_219_p2 <= std_logic_vector(unsigned(j_fu_92) + unsigned(ap_const_lv32_1));
    and_ln1071_1_fu_571_p2 <= (shl_ln1071_1_fu_559_p2 and lshr_ln1071_1_fu_565_p2);
    and_ln1071_2_fu_583_p2 <= (xor_ln1071_3_fu_577_p2 and localbuffer_3_fu_514_p3);
    and_ln1071_3_fu_589_p2 <= (select_ln1071_3_fu_553_p3 and and_ln1071_1_fu_571_p2);
    and_ln1071_fu_446_p2 <= (lshr_ln1071_fu_440_p2 and ldata_dout);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter5, ap_block_state4_pp0_stage0_iter3, ap_block_state6_pp0_stage0_iter5)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state6_pp0_stage0_iter5)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_pp0_stage0_iter3)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter5, ap_block_state4_pp0_stage0_iter3, ap_block_state6_pp0_stage0_iter5)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state6_pp0_stage0_iter5)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_pp0_stage0_iter3)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter5, ap_block_state4_pp0_stage0_iter3, ap_block_state6_pp0_stage0_iter5)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state6_pp0_stage0_iter5)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_pp0_stage0_iter3)));
    end process;


    ap_block_state4_pp0_stage0_iter3_assign_proc : process(ldata_empty_n, ap_predicate_op80_read_state4)
    begin
                ap_block_state4_pp0_stage0_iter3 <= ((ap_predicate_op80_read_state4 = ap_const_boolean_1) and (ldata_empty_n = ap_const_logic_0));
    end process;


    ap_block_state6_pp0_stage0_iter5_assign_proc : process(in_mat_data_full_n, icmp_ln1084_reg_705_pp0_iter4_reg)
    begin
                ap_block_state6_pp0_stage0_iter5 <= ((icmp_ln1084_reg_705_pp0_iter4_reg = ap_const_lv1_1) and (in_mat_data_full_n = ap_const_logic_0));
    end process;


    ap_condition_613_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln1054_reg_693, icmp_ln1065_fu_270_p2)
    begin
                ap_condition_613 <= ((icmp_ln1054_reg_693 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln1065_fu_270_p2 = ap_const_lv1_0));
    end process;


    ap_condition_616_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln1054_reg_693, icmp_ln1065_fu_270_p2)
    begin
                ap_condition_616 <= ((icmp_ln1054_reg_693 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln1065_fu_270_p2 = ap_const_lv1_1));
    end process;


    ap_condition_619_assign_proc : process(ap_enable_reg_pp0_iter3, icmp_ln1054_reg_693_pp0_iter2_reg, icmp_ln1065_reg_709)
    begin
                ap_condition_619 <= ((icmp_ln1065_reg_709 = ap_const_lv1_1) and (icmp_ln1054_reg_693_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1));
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln1054_fu_198_p2)
    begin
        if (((icmp_ln1054_fu_198_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter2_stage0_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln1054_reg_693, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln1054_reg_693 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_condition_exit_pp0_iter2_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter2_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter4_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;
    ap_phi_reg_pp0_iter0_localbuffer_1_reg_155 <= "XXXXXXXX";

    ap_predicate_op80_read_state4_assign_proc : process(icmp_ln1054_reg_693_pp0_iter2_reg, icmp_ln1065_reg_709)
    begin
                ap_predicate_op80_read_state4 <= ((icmp_ln1065_reg_709 = ap_const_lv1_1) and (icmp_ln1054_reg_693_pp0_iter2_reg = ap_const_lv1_1));
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    bLast_width_fu_209_p2 <= "1" when (j_fu_92 = sub) else "0";
    icmp_ln1054_fu_198_p2 <= "1" when (signed(zext_ln1054_fu_194_p1) < signed(bound)) else "0";
    icmp_ln1065_fu_270_p2 <= "1" when (signed(rem_fu_84) < signed(zext_ln1060_fu_252_p1)) else "0";
    icmp_ln1066_fu_329_p2 <= "1" when (rem_fu_84 = ap_const_lv32_0) else "0";
    icmp_ln1071_fu_353_p2 <= "1" when (unsigned(rem_fu_84) > unsigned(sext_ln1071_fu_345_p1)) else "0";
    icmp_ln1074_fu_304_p2 <= "1" when (unsigned(sub_ln1074_1_fu_298_p2) > unsigned(sub_ln1074_fu_292_p2)) else "0";
    icmp_ln1084_fu_214_p2 <= "1" when (signed(j_fu_92) < signed(cols_bound_per_npc_load)) else "0";

    in_mat_data_blk_n_assign_proc : process(ap_enable_reg_pp0_iter5, in_mat_data_full_n, icmp_ln1084_reg_705_pp0_iter4_reg, ap_block_pp0_stage0)
    begin
        if (((icmp_ln1084_reg_705_pp0_iter4_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            in_mat_data_blk_n <= in_mat_data_full_n;
        else 
            in_mat_data_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_mat_data_din <= (select_ln1059_fu_615_p3 and ap_phi_reg_pp0_iter5_localbuffer_1_reg_155);

    in_mat_data_write_assign_proc : process(ap_enable_reg_pp0_iter5, icmp_ln1084_reg_705_pp0_iter4_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln1084_reg_705_pp0_iter4_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            in_mat_data_write <= ap_const_logic_1;
        else 
            in_mat_data_write <= ap_const_logic_0;
        end if; 
    end process;

    j_4_fu_225_p3 <= 
        ap_const_lv32_0 when (bLast_width_fu_209_p2(0) = '1') else 
        add_ln1086_fu_219_p2;
    last_blk_width_cast3_cast_fu_164_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(last_blk_width_cast3),5));

    ldata_blk_n_assign_proc : process(ap_enable_reg_pp0_iter3, ldata_empty_n, ap_predicate_op80_read_state4, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op80_read_state4 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            ldata_blk_n <= ldata_empty_n;
        else 
            ldata_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ldata_read_assign_proc : process(ap_enable_reg_pp0_iter3, ap_predicate_op80_read_state4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op80_read_state4 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            ldata_read <= ap_const_logic_1;
        else 
            ldata_read <= ap_const_logic_0;
        end if; 
    end process;

    localbuffer_3_fu_514_p3 <= 
        ap_const_lv8_0 when (icmp_ln1066_reg_734_pp0_iter3_reg(0) = '1') else 
        localbuffer_reg_769;
    localbuffer_4_fu_595_p2 <= (and_ln1071_3_fu_589_p2 or and_ln1071_2_fu_583_p2);
    localbuffer_5_fu_509_p2 <= (lshr_ln1074_reg_764 and lshr_ln1074_1_fu_503_p2);
    localbuffer_fu_420_p2 <= std_logic_vector(shift_right(unsigned(val_fu_96),to_integer(unsigned('0' & zext_ln1067_fu_416_p1(8-1 downto 0)))));
    lshr_ln1071_1_fu_565_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv8_FF),to_integer(unsigned('0' & zext_ln1071_3_fu_540_p1(8-1 downto 0)))));
    lshr_ln1071_fu_440_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv8_FF),to_integer(unsigned('0' & zext_ln1071_fu_436_p1(8-1 downto 0)))));
    lshr_ln1074_1_fu_503_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv8_FF),to_integer(unsigned('0' & zext_ln1074_2_fu_499_p1(8-1 downto 0)))));
    lshr_ln1074_fu_405_p2 <= std_logic_vector(shift_right(unsigned(select_ln1074_2_fu_388_p3),to_integer(unsigned('0' & zext_ln1074_1_fu_401_p1(8-1 downto 0)))));
    lshr_ln1082_fu_609_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv8_FF),to_integer(unsigned('0' & zext_ln1082_fu_606_p1(8-1 downto 0)))));
    ptr_width_minus_fu_260_p3 <= 
        sub3 when (bLast_width_reg_697(0) = '1') else 
        ap_const_lv5_0;
    rem_2_fu_359_p2 <= std_logic_vector(unsigned(rem_fu_84) + unsigned(sext_ln1061_fu_266_p1));
    rem_3_fu_318_p2 <= std_logic_vector(unsigned(rem_fu_84) - unsigned(zext_ln1060_fu_252_p1));
    select_ln1059_fu_615_p3 <= 
        lshr_ln1082_fu_609_p2 when (bLast_width_reg_697_pp0_iter4_reg(0) = '1') else 
        ap_const_lv8_FF;
    select_ln1071_1_fu_525_p3 <= 
        trunc_ln1071_reg_749_pp0_iter3_reg when (icmp_ln1071_reg_756_pp0_iter3_reg(0) = '1') else 
        trunc_ln1067_reg_739_pp0_iter3_reg;
    select_ln1071_2_fu_457_p3 <= 
        xor_ln1071_1_fu_452_p2 when (icmp_ln1071_reg_756(0) = '1') else 
        trunc_ln1067_reg_739;
    select_ln1071_3_fu_553_p3 <= 
        tmp_14_fu_544_p4 when (icmp_ln1071_reg_756_pp0_iter3_reg(0) = '1') else 
        shl_ln1071_reg_774;
    select_ln1071_fu_520_p3 <= 
        trunc_ln1067_reg_739_pp0_iter3_reg when (icmp_ln1071_reg_756_pp0_iter3_reg(0) = '1') else 
        trunc_ln1071_reg_749_pp0_iter3_reg;
    select_ln1074_1_fu_486_p3 <= 
        sub_ln1074_2_fu_478_p2 when (icmp_ln1074_reg_713_pp0_iter3_reg(0) = '1') else 
        sub_ln1074_3_fu_482_p2;
    select_ln1074_2_fu_388_p3 <= 
        tmp_15_fu_373_p4 when (icmp_ln1074_reg_713(0) = '1') else 
        val_fu_96;
    select_ln1074_3_fu_395_p3 <= 
        xor_ln1074_fu_383_p2 when (icmp_ln1074_reg_713(0) = '1') else 
        trunc_ln1074_reg_720;
    select_ln1074_fu_281_p3 <= 
        add_ln1074_fu_276_p2 when (bLast_width_reg_697(0) = '1') else 
        ap_const_lv5_F;
        sext_ln1061_fu_266_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ptr_width_minus_fu_260_p3),32));

        sext_ln1071_fu_345_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1071_fu_339_p2),32));

    shl_ln1071_1_fu_559_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv8_FF),to_integer(unsigned('0' & zext_ln1071_2_fu_536_p1(8-1 downto 0)))));
    shl_ln1071_fu_467_p2 <= std_logic_vector(shift_left(unsigned(and_ln1071_fu_446_p2),to_integer(unsigned('0' & zext_ln1071_1_fu_463_p1(8-1 downto 0)))));
    sub_ln1067_fu_411_p2 <= std_logic_vector(unsigned(ap_const_lv3_0) - unsigned(trunc_ln1067_reg_739));
    sub_ln1071_fu_426_p2 <= std_logic_vector(unsigned(trunc_ln1071_reg_749) - unsigned(trunc_ln1067_reg_739));
    sub_ln1074_1_fu_298_p2 <= std_logic_vector(unsigned(ap_const_lv32_8) - unsigned(rem_fu_84));
    sub_ln1074_2_fu_478_p2 <= std_logic_vector(unsigned(trunc_ln1074_reg_720_pp0_iter3_reg) - unsigned(trunc_ln1074_1_reg_728_pp0_iter3_reg));
    sub_ln1074_3_fu_482_p2 <= std_logic_vector(unsigned(trunc_ln1074_1_reg_728_pp0_iter3_reg) - unsigned(trunc_ln1074_reg_720_pp0_iter3_reg));
    sub_ln1074_fu_292_p2 <= std_logic_vector(unsigned(zext_ln1074_fu_288_p1) - unsigned(rem_fu_84));
    sub_ln1082_fu_601_p2 <= std_logic_vector(unsigned(ap_const_lv3_0) - unsigned(empty));
    
    tmp_14_fu_544_p4_proc : process(shl_ln1071_reg_774)
    variable vlo_cpy : STD_LOGIC_VECTOR(8+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(8+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(8 - 1 downto 0);
    variable tmp_14_fu_544_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(8 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(8 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(8 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(3 - 1 downto 0) := ap_const_lv32_7(3 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(3 - 1 downto 0) := ap_const_lv32_0(3 - 1 downto 0);
        v0_cpy := shl_ln1071_reg_774;
        if (vlo_cpy(3 - 1 downto 0) > vhi_cpy(3 - 1 downto 0)) then
            vhi_cpy(3-1 downto 0) := std_logic_vector(8-1-unsigned(ap_const_lv32_0(3-1 downto 0)));
            vlo_cpy(3-1 downto 0) := std_logic_vector(8-1-unsigned(ap_const_lv32_7(3-1 downto 0)));
            for tmp_14_fu_544_p4_i in 0 to 8-1 loop
                v0_cpy(tmp_14_fu_544_p4_i) := shl_ln1071_reg_774(8-1-tmp_14_fu_544_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(3-1 downto 0)))));

        section := (others=>'0');
        section(3-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(3-1 downto 0)) - unsigned(vlo_cpy(3-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(8-1 downto 0)))));
        res_mask := res_mask(8-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_14_fu_544_p4 <= resvalue(8-1 downto 0);
    end process;

    
    tmp_15_fu_373_p4_proc : process(val_fu_96)
    variable vlo_cpy : STD_LOGIC_VECTOR(8+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(8+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(8 - 1 downto 0);
    variable tmp_15_fu_373_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(8 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(8 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(8 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(3 - 1 downto 0) := ap_const_lv32_7(3 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(3 - 1 downto 0) := ap_const_lv32_0(3 - 1 downto 0);
        v0_cpy := val_fu_96;
        if (vlo_cpy(3 - 1 downto 0) > vhi_cpy(3 - 1 downto 0)) then
            vhi_cpy(3-1 downto 0) := std_logic_vector(8-1-unsigned(ap_const_lv32_0(3-1 downto 0)));
            vlo_cpy(3-1 downto 0) := std_logic_vector(8-1-unsigned(ap_const_lv32_7(3-1 downto 0)));
            for tmp_15_fu_373_p4_i in 0 to 8-1 loop
                v0_cpy(tmp_15_fu_373_p4_i) := val_fu_96(8-1-tmp_15_fu_373_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(3-1 downto 0)))));

        section := (others=>'0');
        section(3-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(3-1 downto 0)) - unsigned(vlo_cpy(3-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(8-1 downto 0)))));
        res_mask := res_mask(8-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_15_fu_373_p4 <= resvalue(8-1 downto 0);
    end process;

    trunc_ln1067_fu_335_p1 <= rem_fu_84(3 - 1 downto 0);
    trunc_ln1071_fu_349_p1 <= add_ln1071_fu_339_p2(3 - 1 downto 0);
    trunc_ln1074_1_fu_314_p1 <= sub_ln1074_fu_292_p2(3 - 1 downto 0);
    trunc_ln1074_fu_310_p1 <= sub_ln1074_1_fu_298_p2(3 - 1 downto 0);
    xf_bits_per_clock_fu_246_p3 <= 
        last_blk_width_load when (bLast_width_reg_697(0) = '1') else 
        ap_const_lv4_8;
    xor_ln1071_1_fu_452_p2 <= (trunc_ln1067_reg_739 xor ap_const_lv3_7);
    xor_ln1071_2_fu_530_p2 <= (select_ln1071_fu_520_p3 xor ap_const_lv3_7);
    xor_ln1071_3_fu_577_p2 <= (ap_const_lv8_FF xor and_ln1071_1_fu_571_p2);
    xor_ln1071_fu_430_p2 <= (sub_ln1071_fu_426_p2 xor ap_const_lv3_7);
    xor_ln1074_1_fu_493_p2 <= (select_ln1074_1_fu_486_p3 xor ap_const_lv3_7);
    xor_ln1074_fu_383_p2 <= (trunc_ln1074_reg_720 xor ap_const_lv3_7);
    zext_ln1054_fu_194_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_88),32));
    zext_ln1060_1_fu_256_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xf_bits_per_clock_fu_246_p3),5));
    zext_ln1060_fu_252_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xf_bits_per_clock_fu_246_p3),32));
    zext_ln1067_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln1067_fu_411_p2),8));
    zext_ln1071_1_fu_463_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln1071_2_fu_457_p3),8));
    zext_ln1071_2_fu_536_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln1071_1_fu_525_p3),8));
    zext_ln1071_3_fu_540_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln1071_2_fu_530_p2),8));
    zext_ln1071_fu_436_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln1071_fu_430_p2),8));
    zext_ln1074_1_fu_401_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln1074_3_fu_395_p3),8));
    zext_ln1074_2_fu_499_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln1074_1_fu_493_p2),8));
    zext_ln1074_fu_288_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln1074_fu_281_p3),32));
    zext_ln1082_fu_606_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln1082_reg_790),8));
end behav;
