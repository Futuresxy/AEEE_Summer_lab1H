-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sobel_resize_accel_xFGradientX3x3_0_0_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    t0_val : IN STD_LOGIC_VECTOR (7 downto 0);
    t2_val : IN STD_LOGIC_VECTOR (7 downto 0);
    m0_val : IN STD_LOGIC_VECTOR (7 downto 0);
    m2_val : IN STD_LOGIC_VECTOR (7 downto 0);
    b0_val : IN STD_LOGIC_VECTOR (7 downto 0);
    b2_val : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of sobel_resize_accel_xFGradientX3x3_0_0_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

attribute shreg_extract : string;
    signal A00_fu_102_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal A00_reg_205 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal S00_fu_116_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal S00_reg_210 : STD_LOGIC_VECTOR (8 downto 0);
    signal out_pix_fu_122_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal out_pix_reg_215 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal M00_fu_70_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal M01_fu_82_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln61_1_fu_98_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln61_fu_94_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln62_1_fu_112_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln62_fu_108_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln60_fu_90_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln59_fu_78_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln64_fu_134_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln62_2_fu_131_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal out_pix_5_fu_137_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln61_2_fu_128_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal out_pix_4_fu_143_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_2_fu_161_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_153_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln72_fu_177_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln74_fu_171_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln72_fu_191_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln72_fu_183_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln69_fu_149_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln72_1_fu_197_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_ce_reg : STD_LOGIC;
    signal ap_return_int_reg : STD_LOGIC_VECTOR (7 downto 0);


begin




    ap_ce_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_ce_reg <= ap_ce;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1))) then
                A00_reg_205 <= A00_fu_102_p2;
                S00_reg_210 <= S00_fu_116_p2;
                    out_pix_reg_215(9 downto 1) <= out_pix_fu_122_p2(9 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce_reg)) then
                ap_return_int_reg <= select_ln72_1_fu_197_p3;
            end if;
        end if;
    end process;
    out_pix_reg_215(0) <= '0';
    A00_fu_102_p2 <= std_logic_vector(unsigned(zext_ln61_1_fu_98_p1) + unsigned(zext_ln61_fu_94_p1));
    M00_fu_70_p3 <= (m0_val & ap_const_lv1_0);
    M01_fu_82_p3 <= (m2_val & ap_const_lv1_0);
    S00_fu_116_p2 <= std_logic_vector(unsigned(zext_ln62_1_fu_112_p1) + unsigned(zext_ln62_fu_108_p1));
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_return_assign_proc : process(select_ln72_1_fu_197_p3, ap_ce_reg, ap_return_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return <= ap_return_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return <= select_ln72_1_fu_197_p3;
        else 
            ap_return <= "XXXXXXXX";
        end if; 
    end process;

    icmp_ln74_fu_171_p2 <= "1" when (signed(tmp_2_fu_161_p4) > signed(ap_const_lv3_0)) else "0";
    or_ln72_fu_191_p2 <= (tmp_fu_153_p3 or icmp_ln74_fu_171_p2);
    out_pix_4_fu_143_p2 <= std_logic_vector(unsigned(out_pix_5_fu_137_p2) + unsigned(zext_ln61_2_fu_128_p1));
    out_pix_5_fu_137_p2 <= std_logic_vector(signed(sext_ln64_fu_134_p1) - signed(zext_ln62_2_fu_131_p1));
    out_pix_fu_122_p2 <= std_logic_vector(unsigned(zext_ln60_fu_90_p1) - unsigned(zext_ln59_fu_78_p1));
    select_ln72_1_fu_197_p3 <= 
        select_ln72_fu_183_p3 when (or_ln72_fu_191_p2(0) = '1') else 
        trunc_ln69_fu_149_p1;
    select_ln72_fu_183_p3 <= 
        ap_const_lv8_FF when (xor_ln72_fu_177_p2(0) = '1') else 
        ap_const_lv8_0;
        sext_ln64_fu_134_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(out_pix_reg_215),11));

    tmp_2_fu_161_p4 <= out_pix_4_fu_143_p2(10 downto 8);
    tmp_fu_153_p3 <= out_pix_4_fu_143_p2(10 downto 10);
    trunc_ln69_fu_149_p1 <= out_pix_4_fu_143_p2(8 - 1 downto 0);
    xor_ln72_fu_177_p2 <= (tmp_fu_153_p3 xor ap_const_lv1_1);
    zext_ln59_fu_78_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(M00_fu_70_p3),10));
    zext_ln60_fu_90_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(M01_fu_82_p3),10));
    zext_ln61_1_fu_98_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b2_val),9));
    zext_ln61_2_fu_128_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(A00_reg_205),11));
    zext_ln61_fu_94_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t2_val),9));
    zext_ln62_1_fu_112_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b0_val),9));
    zext_ln62_2_fu_131_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(S00_reg_210),11));
    zext_ln62_fu_108_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t0_val),9));
end behav;
