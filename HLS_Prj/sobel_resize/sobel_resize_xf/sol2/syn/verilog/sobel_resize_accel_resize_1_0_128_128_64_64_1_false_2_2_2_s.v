// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module sobel_resize_accel_resize_1_0_128_128_64_64_1_false_2_2_2_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        p_src_rows_dout,
        p_src_rows_num_data_valid,
        p_src_rows_fifo_cap,
        p_src_rows_empty_n,
        p_src_rows_read,
        p_src_cols_dout,
        p_src_cols_num_data_valid,
        p_src_cols_fifo_cap,
        p_src_cols_empty_n,
        p_src_cols_read,
        in_mat_data_dout,
        in_mat_data_num_data_valid,
        in_mat_data_fifo_cap,
        in_mat_data_empty_n,
        in_mat_data_read,
        p_read,
        p_read1,
        out_resize_mat_data_din,
        out_resize_mat_data_num_data_valid,
        out_resize_mat_data_fifo_cap,
        out_resize_mat_data_full_n,
        out_resize_mat_data_write,
        out_resize_mat_rows_c_din,
        out_resize_mat_rows_c_num_data_valid,
        out_resize_mat_rows_c_fifo_cap,
        out_resize_mat_rows_c_full_n,
        out_resize_mat_rows_c_write,
        out_resize_mat_cols_c_din,
        out_resize_mat_cols_c_num_data_valid,
        out_resize_mat_cols_c_fifo_cap,
        out_resize_mat_cols_c_full_n,
        out_resize_mat_cols_c_write
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] p_src_rows_dout;
input  [2:0] p_src_rows_num_data_valid;
input  [2:0] p_src_rows_fifo_cap;
input   p_src_rows_empty_n;
output   p_src_rows_read;
input  [31:0] p_src_cols_dout;
input  [2:0] p_src_cols_num_data_valid;
input  [2:0] p_src_cols_fifo_cap;
input   p_src_cols_empty_n;
output   p_src_cols_read;
input  [7:0] in_mat_data_dout;
input  [2:0] in_mat_data_num_data_valid;
input  [2:0] in_mat_data_fifo_cap;
input   in_mat_data_empty_n;
output   in_mat_data_read;
input  [31:0] p_read;
input  [31:0] p_read1;
output  [7:0] out_resize_mat_data_din;
input  [2:0] out_resize_mat_data_num_data_valid;
input  [2:0] out_resize_mat_data_fifo_cap;
input   out_resize_mat_data_full_n;
output   out_resize_mat_data_write;
output  [31:0] out_resize_mat_rows_c_din;
input  [2:0] out_resize_mat_rows_c_num_data_valid;
input  [2:0] out_resize_mat_rows_c_fifo_cap;
input   out_resize_mat_rows_c_full_n;
output   out_resize_mat_rows_c_write;
output  [31:0] out_resize_mat_cols_c_din;
input  [2:0] out_resize_mat_cols_c_num_data_valid;
input  [2:0] out_resize_mat_cols_c_fifo_cap;
input   out_resize_mat_cols_c_full_n;
output   out_resize_mat_cols_c_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg p_src_rows_read;
reg p_src_cols_read;
reg in_mat_data_read;
reg out_resize_mat_data_write;
reg out_resize_mat_rows_c_write;
reg out_resize_mat_cols_c_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    p_src_rows_blk_n;
reg    p_src_cols_blk_n;
reg    out_resize_mat_rows_c_blk_n;
reg    out_resize_mat_cols_c_blk_n;
reg    ap_block_state1;
reg   [31:0] p_src_cols_read_reg_110;
reg   [31:0] p_src_rows_read_reg_115;
wire    grp_resizeNNBilinear_0_128_128_1_false_2_2_64_64_1_2_s_fu_84_ap_start;
wire    grp_resizeNNBilinear_0_128_128_1_false_2_2_64_64_1_2_s_fu_84_ap_done;
wire    grp_resizeNNBilinear_0_128_128_1_false_2_2_64_64_1_2_s_fu_84_ap_idle;
wire    grp_resizeNNBilinear_0_128_128_1_false_2_2_64_64_1_2_s_fu_84_ap_ready;
wire    grp_resizeNNBilinear_0_128_128_1_false_2_2_64_64_1_2_s_fu_84_in_mat_data_read;
wire   [7:0] grp_resizeNNBilinear_0_128_128_1_false_2_2_64_64_1_2_s_fu_84_out_resize_mat_data_din;
wire    grp_resizeNNBilinear_0_128_128_1_false_2_2_64_64_1_2_s_fu_84_out_resize_mat_data_write;
reg    grp_resizeNNBilinear_0_128_128_1_false_2_2_64_64_1_2_s_fu_84_ap_start_reg;
reg    ap_block_state1_ignore_call12;
wire    ap_CS_fsm_state2;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
#0 grp_resizeNNBilinear_0_128_128_1_false_2_2_64_64_1_2_s_fu_84_ap_start_reg = 1'b0;
end

sobel_resize_accel_resizeNNBilinear_0_128_128_1_false_2_2_64_64_1_2_s grp_resizeNNBilinear_0_128_128_1_false_2_2_64_64_1_2_s_fu_84(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_resizeNNBilinear_0_128_128_1_false_2_2_64_64_1_2_s_fu_84_ap_start),
    .ap_done(grp_resizeNNBilinear_0_128_128_1_false_2_2_64_64_1_2_s_fu_84_ap_done),
    .ap_idle(grp_resizeNNBilinear_0_128_128_1_false_2_2_64_64_1_2_s_fu_84_ap_idle),
    .ap_ready(grp_resizeNNBilinear_0_128_128_1_false_2_2_64_64_1_2_s_fu_84_ap_ready),
    .imgInput_rows_val(p_src_rows_read_reg_115),
    .imgInput_cols_val(p_src_cols_read_reg_110),
    .in_mat_data_dout(in_mat_data_dout),
    .in_mat_data_num_data_valid(3'd0),
    .in_mat_data_fifo_cap(3'd0),
    .in_mat_data_empty_n(in_mat_data_empty_n),
    .in_mat_data_read(grp_resizeNNBilinear_0_128_128_1_false_2_2_64_64_1_2_s_fu_84_in_mat_data_read),
    .imgOutput_rows_val(p_read),
    .imgOutput_cols_val(p_read1),
    .out_resize_mat_data_din(grp_resizeNNBilinear_0_128_128_1_false_2_2_64_64_1_2_s_fu_84_out_resize_mat_data_din),
    .out_resize_mat_data_num_data_valid(3'd0),
    .out_resize_mat_data_fifo_cap(3'd0),
    .out_resize_mat_data_full_n(out_resize_mat_data_full_n),
    .out_resize_mat_data_write(grp_resizeNNBilinear_0_128_128_1_false_2_2_64_64_1_2_s_fu_84_out_resize_mat_data_write)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (grp_resizeNNBilinear_0_128_128_1_false_2_2_64_64_1_2_s_fu_84_ap_done == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_resizeNNBilinear_0_128_128_1_false_2_2_64_64_1_2_s_fu_84_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state1_ignore_call12) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_resizeNNBilinear_0_128_128_1_false_2_2_64_64_1_2_s_fu_84_ap_start_reg <= 1'b1;
        end else if ((grp_resizeNNBilinear_0_128_128_1_false_2_2_64_64_1_2_s_fu_84_ap_ready == 1'b1)) begin
            grp_resizeNNBilinear_0_128_128_1_false_2_2_64_64_1_2_s_fu_84_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_src_cols_read_reg_110 <= p_src_cols_dout;
        p_src_rows_read_reg_115 <= p_src_rows_dout;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_resizeNNBilinear_0_128_128_1_false_2_2_64_64_1_2_s_fu_84_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (grp_resizeNNBilinear_0_128_128_1_false_2_2_64_64_1_2_s_fu_84_ap_done == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        in_mat_data_read = grp_resizeNNBilinear_0_128_128_1_false_2_2_64_64_1_2_s_fu_84_in_mat_data_read;
    end else begin
        in_mat_data_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (grp_resizeNNBilinear_0_128_128_1_false_2_2_64_64_1_2_s_fu_84_ap_done == 1'b1))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_resize_mat_cols_c_blk_n = out_resize_mat_cols_c_full_n;
    end else begin
        out_resize_mat_cols_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        out_resize_mat_cols_c_write = 1'b1;
    end else begin
        out_resize_mat_cols_c_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_resize_mat_data_write = grp_resizeNNBilinear_0_128_128_1_false_2_2_64_64_1_2_s_fu_84_out_resize_mat_data_write;
    end else begin
        out_resize_mat_data_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_resize_mat_rows_c_blk_n = out_resize_mat_rows_c_full_n;
    end else begin
        out_resize_mat_rows_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        out_resize_mat_rows_c_write = 1'b1;
    end else begin
        out_resize_mat_rows_c_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_src_cols_blk_n = p_src_cols_empty_n;
    end else begin
        p_src_cols_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_src_cols_read = 1'b1;
    end else begin
        p_src_cols_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_src_rows_blk_n = p_src_rows_empty_n;
    end else begin
        p_src_rows_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_src_rows_read = 1'b1;
    end else begin
        p_src_rows_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (grp_resizeNNBilinear_0_128_128_1_false_2_2_64_64_1_2_s_fu_84_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (out_resize_mat_cols_c_full_n == 1'b0) | (out_resize_mat_rows_c_full_n == 1'b0) | (p_src_cols_empty_n == 1'b0) | (p_src_rows_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state1_ignore_call12 = ((real_start == 1'b0) | (out_resize_mat_cols_c_full_n == 1'b0) | (out_resize_mat_rows_c_full_n == 1'b0) | (p_src_cols_empty_n == 1'b0) | (p_src_rows_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_ready = internal_ap_ready;

assign grp_resizeNNBilinear_0_128_128_1_false_2_2_64_64_1_2_s_fu_84_ap_start = grp_resizeNNBilinear_0_128_128_1_false_2_2_64_64_1_2_s_fu_84_ap_start_reg;

assign out_resize_mat_cols_c_din = p_read1;

assign out_resize_mat_data_din = grp_resizeNNBilinear_0_128_128_1_false_2_2_64_64_1_2_s_fu_84_out_resize_mat_data_din;

assign out_resize_mat_rows_c_din = p_read;

assign start_out = real_start;

endmodule //sobel_resize_accel_resize_1_0_128_128_64_64_1_false_2_2_2_s
